<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:local="*" xmlns:whiteboard="org.jboss.demo.whiteboard.*">
  
  <!--
  When the size of the owner's DrawingBoard changes broadcast the change to all who are connected to the DrawingBoard
  -->
  
  <!--
  Upload an image to this board
  -->
  
  <!--
  View Whiteboard history
  -->
  
  <!--
  Share Whiteboard
  -->
  
  <fx:Metadata>
    [Event("exit")]
  </fx:Metadata>  

  <fx:Script>
      import mx.controls.Alert;
    
      import mx.utils.ObjectUtil;
    
      import mx.messaging.messages.AsyncMessage;
      
      import org.jboss.demo.whiteboard.WhiteboardDTO;
      
      private var _whiteboard:WhiteboardDTO;
    
      public function set whiteboard(_whiteboard:WhiteboardDTO):void
      {
        this._whiteboard = _whiteboard;

        ro.getWhiteboard(whiteboard.id);
        
        attendeeListChange.channelSet = Config.getInstance().messagingChannelSet;
        attendeeListChange.subtopic = whiteboard.id;
        attendeeListChange.subscribe();
        
        whiteboardDrawingCons.channelSet = Config.getInstance().messagingChannelSet;
        whiteboardDrawingCons.subtopic = whiteboard.id;
        whiteboardDrawingCons.subscribe();
        
        whiteboardDrawingProd.channelSet = Config.getInstance().messagingChannelSet;
        whiteboardDrawingProd.subtopic = whiteboard.id;
      }
    
      [Bindable]
      public function get whiteboard():WhiteboardDTO
      {
        return _whiteboard;
      }
  </fx:Script>
  
  <fx:Declarations>
    <s:Consumer id="attendeeListChange" destination="attendeeListChange">
      <s:message>
        ro.getWhiteboard(whiteboard.id);
      </s:message>
    </s:Consumer>
    
    <s:Consumer id="whiteboardDrawingCons" destination="whiteboardDrawing">
      <s:message>
        if (event.message.body.clientId != whiteboardDrawingCons.clientId)
        {
          if (event.message.body.command == "erase")
          {
            drawingArea.erase();
          }
          else if (event.message.body.command == "draw")
          {
            drawingArea.doDraw(event.message.body.draw);
          }
        }
        event.stopImmediatePropagation();
      </s:message>
    </s:Consumer>
    
    <s:Producer id="whiteboardDrawingProd" destination="whiteboardDrawing"/>

    <s:RemoteObject id="ro" destination="WhiteboardService" endpoint="messagebroker/amf">
      <s:result>
        whiteboard.attendeeNames = event.result.attendeeNames;
      </s:result>
    </s:RemoteObject>
  </fx:Declarations>
  
  <s:layout>
    <s:VerticalLayout gap="0"/>
  </s:layout>
  
  <s:Group id="navBar" width="100%" height="50">
    <s:Rect width="100%" height="100%">
      <s:fill>
        <s:LinearGradient rotation="90">
          <s:GradientEntry color="#dddddd" ratio="0.8"/>
          <s:GradientEntry color="#aaaaaa" ratio="1"/>
        </s:LinearGradient>
      </s:fill>
    </s:Rect>
    
    <s:Label text="Whiteboard: {whiteboard.name}" fontSize="24" fontWeight="bold" top="10" left="10"/>
    
    <s:Button label="Share" top="10" right="100">
      <s:click>
        Alert.show("Send the other attendees the following password:\n" + whiteboard.id, "Share this Whiteboard");
      </s:click>
    </s:Button>
    
    <s:Button label="Exit" top="10" right="10">
      <s:click>
        attendeeListChange.unsubscribe();
        dispatchEvent(new Event('exit'));
      </s:click>
    </s:Button>
  </s:Group>
  
  <s:Group width="100%" height="100%">
    <s:layout>
      <s:HorizontalLayout gap="0"/>
    </s:layout>
    
    <s:Group id="drawingTools" height="100%">
      <s:Rect width="100%" height="100%">
        <s:fill>
          <s:SolidColor color="#aaaaaa"/>
        </s:fill>
      </s:Rect>
      
      <s:Group>
        <s:layout>
          <s:VerticalLayout paddingTop="10" paddingRight="10" paddingLeft="10" paddingBottom="10"/>
        </s:layout>
      
        <mx:ColorPicker change="drawingArea.drawColor = event.target.selectedColor"/>
        <s:Button label="Erase">
          <s:click>
            whiteboardDrawingProd.send(new AsyncMessage({command: 'erase', clientId: whiteboardDrawingCons.clientId}));
            drawingArea.erase();
          </s:click>
        </s:Button>
        <s:Button label="Save Image" click="drawingArea.save()"/>
        
        <mx:Spacer height="100%"/>
        
        <s:Label text="Attendees"/>
        <s:List dataProvider="{whiteboard.attendeeNames}" width="100%"/>

      </s:Group>
      
    </s:Group>
  
    <local:DrawingArea id="drawingArea" width="100%" height="100%">
      <local:draw>
        whiteboardDrawingProd.send(new AsyncMessage({command: 'draw', draw: event.draw, clientId: whiteboardDrawingCons.clientId}));
        drawingArea.doDraw(event.draw);
      </local:draw>
      <!--
      Maintain a queue of drawn items and periodically flush them to the server for historical versioning
      -->
    </local:DrawingArea>
  </s:Group>
  
</s:Group>